// Code generated by "enumer -type=FormatEnum -linecomment -output=enums_gen.go"; DO NOT EDIT.

package logger

import (
	"fmt"
	"strings"
)

const _FormatEnumName = "consolejson"

var _FormatEnumIndex = [...]uint8{0, 7, 11}

const _FormatEnumLowerName = "consolejson"

func (i FormatEnum) String() string {
	i -= 1
	if i < 0 || i >= FormatEnum(len(_FormatEnumIndex)-1) {
		return fmt.Sprintf("FormatEnum(%d)", i+1)
	}
	return _FormatEnumName[_FormatEnumIndex[i]:_FormatEnumIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _FormatEnumNoOp() {
	var x [1]struct{}
	_ = x[Console-(1)]
	_ = x[JSON-(2)]
}

var _FormatEnumValues = []FormatEnum{Console, JSON}

var _FormatEnumNameToValueMap = map[string]FormatEnum{
	_FormatEnumName[0:7]:       Console,
	_FormatEnumLowerName[0:7]:  Console,
	_FormatEnumName[7:11]:      JSON,
	_FormatEnumLowerName[7:11]: JSON,
}

var _FormatEnumNames = []string{
	_FormatEnumName[0:7],
	_FormatEnumName[7:11],
}

// FormatEnumString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func FormatEnumString(s string) (FormatEnum, error) {
	if val, ok := _FormatEnumNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _FormatEnumNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to FormatEnum values", s)
}

// FormatEnumValues returns all values of the enum
func FormatEnumValues() []FormatEnum {
	return _FormatEnumValues
}

// FormatEnumStrings returns a slice of all String values of the enum
func FormatEnumStrings() []string {
	strs := make([]string, len(_FormatEnumNames))
	copy(strs, _FormatEnumNames)
	return strs
}

// IsAFormatEnum returns "true" if the value is listed in the enum definition. "false" otherwise
func (i FormatEnum) IsAFormatEnum() bool {
	for _, v := range _FormatEnumValues {
		if i == v {
			return true
		}
	}
	return false
}
